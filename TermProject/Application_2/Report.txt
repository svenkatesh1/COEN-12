Synopsis for functions of Application 2Data Structure Used: Hash Table* A hash table is best suited for this functionality since the IDs that are generated randomly need to be in a data structure than can access those values quickly.* It would be very tedious to insert a sorted list because for each random ID value generated, the list would have to be shifted for it to remain sorted.* Linked list is also not a good option since it would take O(n) runtime to search values in the list. Function: createSet* BigO runtime: O(n)* It takes O(n) for memory allocation of student pointers and O(1) for all other operations.Function: destroySet* BigO runtime: O(n)* It takes O(n) for freeing elements in the array and O(1) for all other operations. Function: searchid* BigO runtime: O(1) in most cases and O(n) Ð worst case not very often.* O(n) happens only if all values are located next to each other due to which collision might occur.Function: insertstu* BigO runtime: O(1) in most cases and O(n) Ð worst case not very often.* O(n) happens only if all values are located next to each other due to which collision might occur.Function: removeStu* BigO runtime: O(1) in most cases and O(n) Ð worst case not very often.* O(n) happens only if all values are located next to each other due to which collision might occur.