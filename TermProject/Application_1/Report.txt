Synopsis for functions of Application 1Data Structure Used: ArraySorted Array of Students (in terms of student age)* Array of students is grouped and arranged in terms of age which makes it easier to search any given student based on the entered age.* The search function used for this purpose is the Binary Search. Hashing is not a good option for this functionality since it takes O(m) runtime to find the maximum and minimum values for an array with m elements.* MaxAgeGap can be done at O(1) runtime.Function: createDataSet* BigO Runtime: O(n)* The function takes O(1) for all other opearations but takes O(n) for allocating memory to all the elements of the array of student pointers. Function: destroyDataSet * BigO runtime: O(n)* The function takes O(1) for all other operations and takes O(n) for freeing each and every memory in the array of student pointers.Function: searchAge* BigO runtime: O(n)* To find the index where student of a specific age is located in the list – O(log(n))* To find all students with specific age with ‘age’ being the number of students of that given age – O(age)* Shifting the students so that the list remains sorted where n is the total number of students in the list – O(n-age)* Final BigO – O(log(n)) + O(age) + O(n-age) = O(log(n))+ O(n)* The function uses binary search to find the index of the student of a given age. Even though the bigO runtime for this method is same as the sequential search, in an average case, the code will implement slightly faster than sequential search.    Function: insertstu* BigO runtime: O(n)* To search index where student should be inserted – O(log(n))* To shift values so that array remains sorted – O(n) Function: removeStu* BigO runtime: O(n)* To remove all students with specific age where ‘age’ is the number of students of that given age group – O(age)* To shift all students higher than the age specified down the list – O(n-a)* Final BigO - O(age) + O(n-a) = O(n) Function: maxAgeGap* BigO runtime: O(1)* To get min and max ages in the list – O(1)* To calculate gap = max-min – O(1)* Final BigO – O(1)